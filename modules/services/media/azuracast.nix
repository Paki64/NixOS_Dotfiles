{ config, lib, pkgs, ... }:

{
  options = {
    modules.services.media.azuracast.enable = 
      lib.mkEnableOption "starts azuracast server";
  };

  config = lib.mkIf config.modules.services.media.azuracast.enable {

    # Containers
    virtualisation.oci-containers.containers."azuracast" = {
      image = "ghcr.io/azuracast/azuracast:0.20.2";
      environment = {
        "APPLICATION_ENV" = "production";
        "AUTO_ASSIGN_PORT_MAX" = "8499";
        "AUTO_ASSIGN_PORT_MIN" = "8000";
        "COMPOSER_PLUGIN_MODE" = "false";
        "MYSQL_PASSWORD" = "CHANGE_ME";
        "MYSQL_RANDOM_ROOT_PASSWORD" = "yes";
        "SHOW_DETAILED_ERRORS" = "false";
      };
      volumes = [
        "/home/paki/data/azuracast/acme:/var/azuracast/storage/acme:rw"
        "/home/paki/data/azuracast/backups:/var/azuracast/backups:rw"
        "/home/paki/data/azuracast/db_data:/var/lib/mysql:rw"
        "/home/paki/data/azuracast/geolite_install:/var/azuracast/storage/geoip:rw"
        "/home/paki/data/azuracast/metadata_cache:/var/azuracast/myMusic:rw"
        "/home/paki/data/azuracast/sftpgo_data:/var/azuracast/storage/sftpgo:rw"
        "/home/paki/data/azuracast/shoutcast2_install:/var/azuracast/storage/shoutcast2:rw"
        "/home/paki/data/azuracast/station_data:/var/azuracast/stations:rw"
        "/home/paki/data/azuracast/stereo_tool_install:/var/azuracast/storage/stereo_tool:rw"
        "/home/paki/data/azuracast/www_uploads:/var/azuracast/storage/uploads:rw"
        "/media/music:/var/azuracast/music/remote"
      ];
      ports = [
        "880:80/tcp"
        "8843:443/tcp"
        "2022:2022/tcp"
        "8000:8000/tcp"
        "8005:8005/tcp"
        "8006:8006/tcp"
        "8010:8010/tcp"
        "8015:8015/tcp"
        "8016:8016/tcp"
        "8020:8020/tcp"
        "8025:8025/tcp"
        "8026:8026/tcp"
        "8030:8030/tcp"
        "8035:8035/tcp"
        "8036:8036/tcp"
      ];
      labels = {
        "com.centurylinklabs.watchtower.scope" = "azuracast";
      };
      extraOptions = [
        "--log-opt=max-file=5"
        "--log-opt=max-size=1m"
        "--network-alias=web"
        "--network=azuracast_default"
      ];
    };
    systemd.services."podman-azuracast" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
      };
      after = [
        "podman-network-azuracast_default.service"
      ];
      requires = [
        "podman-network-azuracast_default.service"
      ];
      partOf = [
        "podman-compose-azuracast-root.target"
      ];
      wantedBy = [
        "podman-compose-azuracast-root.target"
      ];
    };

    # Networks
    systemd.services."podman-network-azuracast_default" = {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f azuracast_default";
      };
      script = ''
        podman network inspect azuracast_default || podman network create azuracast_default
      '';
      partOf = [ "podman-compose-azuracast-root.target" ];
      wantedBy = [ "podman-compose-azuracast-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-azuracast-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };

  };
}