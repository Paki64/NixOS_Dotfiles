{ config, lib, pkgs, ... }:

{
  options = {
    modules.services.crafty.enable = 
      lib.mkEnableOption "enables minecraft server management";
  };

  config = lib.mkIf config.modules.services.crafty.enable {
    
    # Firewall Ports
    networking.firewall.allowedTCPPortRanges = [
      {from = 25600; to = 25700;} 
    ];

    # Crafty manager
    virtualisation.oci-containers.containers."crafty" = {
      image = "registry.gitlab.com/crafty-controller/crafty-4:latest";
      environment = {
        "TZ" = "Etc/UTC";
      };
      volumes = [
        "/srv/nas/apps/crafty/config/backups:/crafty/backups:rw"
        "/srv/nas/apps/crafty/config/logs:/crafty/logs:rw"
        "/srv/nas/apps/crafty/servers:/crafty/servers:rw"
        "/srv/nas/apps/crafty/config/app/config:/crafty/app/config:rw"
        "/srv/nas/apps/crafty/config/import:/crafty/import:rw"
      ];
      ports = [
        "8443:8443/tcp"               # HTTPS WebUI
        "8123:8123/tcp"               # Dynmap
        "19132:19132/udp"             # Bedrock
        "25600-25700:25600-25700"     # Java
      ];
      log-driver = "journald";
      extraOptions = [
        "--network-alias=crafty"
        "--network=crafty"
      ];
    };
    systemd.services."podman-crafty" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
        };
        after = [
          "podman-network-crafty.service"
        ];
        requires = [
          "podman-network-crafty.service"
        ];
        partOf = [
          "podman-compose-crafty-root.target"
        ];
        wantedBy = [
          "podman-compose-crafty-root.target"
        ];
    };

    # Networks
    systemd.services."podman-network-crafty" = {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f crafty";
      };
      script = ''
        podman network inspect crafty || podman network create crafty
      '';
      partOf = [ "podman-compose-crafty-root.target" ];
      wantedBy = [ "podman-compose-crafty-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-crafty-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };

  };

}